{"version":3,"file":"esri-leaflet-gp-debug.js","sources":["../src/Tasks/Geoprocessing.js","../src/Services/Geoprocessing.js"],"sourcesContent":["/*\nto do:\nsetParam([])\n*/\n\nimport L from 'leaflet';\nimport { Task as BaseTask, Util } from 'esri-leaflet';\n\nexport const Task = BaseTask.extend({\n\n  includes: L.Evented.prototype,\n\n  // setters: {}, we don't use these because we don't know the ParamName OR value of custom GP services\n  params: {},\n  resultParams: {},\n\n  initialize: function (options) {\n    // don't replace parent initialize\n    BaseTask.prototype.initialize.call(this, options);\n\n    // if no constuctor options are supplied try and determine if its sync or async and set path via metadata\n    if (!this.options.path && typeof this.options.async === 'undefined') {\n      // assume initially that the service is synchronous\n      this.options.async = false;\n      this.options.path = 'execute';\n\n      // the parameters below seem wonky to me, but work for both CORS and JSONP requests\n      this._service.metadata(function (error, results) {\n        if (!error) {\n          if (results.executionType === 'esriExecutionTypeSynchronous') {\n            this.options.async = false;\n            this.options.path = 'execute';\n          } else {\n            this.options.async = true;\n            this.options.path = 'submitJob';\n          }\n          this.fire('initialized');\n        } else {\n          // abort\n\n        }\n      }, this);\n    } else {\n      // if async is set, but not path, default to submit job\n      if (this.options.async) {\n        this.options.path = this.options.path ? this.options.path : 'submitJob';\n      }\n      if (!this.options.async) {\n        this.options.path = this.options.path ? this.options.path : 'execute';\n      }\n    }\n  },\n\n  // doc for various GPInput types can be found here\n  // http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/GP_Result/02r3000000q7000000/\n  setParam: function (paramName, paramValue) {\n    if (typeof paramValue === 'boolean' || typeof paramValue !== 'object') {\n      // pass through booleans, numbers, strings\n      this.params[paramName] = paramValue;\n    } else if (typeof paramValue === 'object' && paramValue.units) {\n      // pass through GPLinearUnit params unmolested also\n      this.params[paramName] = paramValue;\n    } else if (paramName === 'geometry') {\n      // convert raw geojson geometries to esri geometries\n      this.params[paramName] = this._setGeometry(paramValue);\n    } else {\n      // otherwise assume its latlng, marker, bounds or geojson and package up an array of esri features\n      const geometryType = this._setGeometryType(paramValue);\n      const esriFeatures = {\n        features: []\n      };\n\n      if (geometryType) {\n        esriFeatures.geometryType = geometryType;\n      }\n      if (paramValue.type === 'FeatureCollection' && paramValue.features[0].type === 'Feature') {\n        for (let i = 0; i < paramValue.features.length; i++) {\n          if (paramValue.features[i].type === 'Feature') {\n            // pass through feature attributes and geometries\n            esriFeatures.features.push(Util.geojsonToArcGIS(paramValue.features[i]));\n          } else {\n            // otherwise assume the array only contains geometries\n            esriFeatures.features.push({ geometry: Util.geojsonToArcGIS(paramValue.features[i].geometry) });\n          }\n        }\n      } else {\n        esriFeatures.features.push({ geometry: this._setGeometry(paramValue) });\n      }\n      this.params[paramName] = esriFeatures;\n    }\n  },\n\n  // give developer opportunity to point out where the output is going to be available\n  setOutputParam: function (paramName) {\n    this.params.outputParam = paramName;\n  },\n\n  /* async elevation services need resultParams in order to return Zs (unnecessarily confusing) */\n  gpAsyncResultParam: function (paramName, paramValue) {\n    this.resultParams[paramName] = paramValue;\n  },\n\n  // we currently expect a single geometry or feature (ported from: Tasks.Query._setGeometry)\n  _setGeometry: function (geometry) {\n    // convert bounds to extent and finish\n    if (geometry instanceof L.LatLngBounds) {\n      return L.esri.Util.boundsToExtent(geometry);\n    }\n\n    // convert L.Marker > L.LatLng\n    if (geometry.getLatLng) {\n      geometry = geometry.getLatLng();\n    }\n\n    // convert L.LatLng to a geojson point and continue;\n    if (geometry instanceof L.LatLng) {\n      geometry = {\n        type: 'Point',\n        coordinates: [geometry.lng, geometry.lat]\n      };\n    }\n\n    // handle L.GeoJSON, pull out the first geometry\n    if (geometry instanceof L.GeoJSON) {\n      // reassign geometry to the GeoJSON value  (we assume one feature is present)\n      geometry = geometry.getLayers()[0].feature.geometry;\n      // processedInput.geometryType = Util.geojsonTypeToArcGIS(geometry.type);\n      return Util.geojsonToArcGIS(geometry);\n    }\n\n    // Handle L.Polyline and L.Polygon\n    if (geometry.toGeoJSON) {\n      geometry = geometry.toGeoJSON();\n    }\n\n    // handle GeoJSON feature by pulling out the geometry\n    if (geometry.type === 'Feature') {\n      // get the geometry of the geojson feature\n      geometry = geometry.geometry;\n    }\n\n    // confirm that our GeoJSON is a point, line or polygon\n    if (geometry.type === 'Point' || geometry.type === 'LineString' || geometry.type === 'Polygon') {\n      return Util.geojsonToArcGIS(geometry);\n      // processedInput.geometryType = Util.geojsonTypeToArcGIS(geometry.type);\n    } else {\n      Util.warn('invalid geometry passed as GP input. Should be an L.LatLng, L.LatLngBounds, L.Marker or GeoJSON Point Line or Polygon object');\n    }\n  },\n\n  _setGeometryType: function (geometry) {\n    if (geometry instanceof L.LatLngBounds) {\n      return 'esriGeometryEnvelope';\n    }\n\n    // convert L.Marker > L.LatLng\n    if (geometry.getLatLng || geometry instanceof L.LatLng) {\n      return 'esriGeometryPoint';\n    }\n\n    // handle L.GeoJSON, pull out the first geometry\n    if (geometry instanceof L.GeoJSON) {\n      geometry = geometry.getLayers()[0].feature.geometry;\n      return Util.geojsonTypeToArcGIS(geometry.type);\n    }\n\n    // Handle L.Polyline and L.Polygon\n    if (geometry.toGeoJSON) {\n      geometry = geometry.toGeoJSON();\n    }\n\n    // handle GeoJSON feature by pulling out the geometry\n    if (geometry.type === 'Feature') {\n      // get the geometry of the geojson feature\n      geometry = geometry.geometry;\n    }\n\n    // confirm that our GeoJSON is a point, line or polygon\n    if (geometry.type === 'Point' || geometry.type === 'LineString' || geometry.type === 'Polygon') {\n      return Util.geojsonTypeToArcGIS(geometry.type);\n    } else if (geometry.type === 'FeatureCollection') {\n      return Util.geojsonTypeToArcGIS(geometry.features[0].type);\n    } else {\n      return null;\n    }\n  },\n\n  run: function (callback, context) {\n    this._done = false;\n\n    if (this.options.async === true) {\n      /* eslint-disable */\n      this._service.request(this.options.path, this.params, function (error, response) {\n        this._currentJobId = response.jobId;\n        this.checkJob(this._currentJobId, callback, context);\n      }, this);\n      /* eslint-enable */\n    } else {\n      return this._service.request(this.options.path, this.params, function (error, response) {\n        if (!error) {\n          if (response.results) {\n            callback.call(context, error, (response && this._processGPOutput(response)), response);\n          } else if (response.histograms) {\n            callback.call(context, error, response, response);\n          } else if (response.routes) {\n            callback.call(context, error, (response && this._processNetworkAnalystOutput(response)), response);\n          }\n        } else {\n          callback.call(context, error, null, null);\n        }\n      }, this);\n    }\n  },\n\n  getResult: function (jobId, output, callback, context) {\n    this._service.request(\n      'jobs/' + jobId + '/results/' + output,\n      this.resultParams,\n      function processJobResult (error, response) {\n        let result = null;\n        const out = (response && this._processAsyncOutput(response));\n\n        if (output in out) {\n          result = out[output];\n        }\n\n        callback.call(\n          context,\n          error,\n          result,\n          response\n        );\n      }, this);\n  },\n\n  checkJob: function (jobId, callback, context) {\n    const pollJob = function () {\n      /* eslint-disable */\n      this._service.request('jobs/' + jobId, {}, function polledJob (error, response) {\n        if (response.jobStatus === 'esriJobSucceeded') {\n          if (!this._done) {\n            this._done = true;\n            // to do:\n            // refactor to make an array of async requests for output\n            this._service.request('jobs/' + jobId + '/results/' + this.params.outputParam, this.resultParams, function processJobResult (error, response) {\n              callback.call(context, error, (response && this._processAsyncOutput(response)), response);\n            }, this);\n          }\n          window.clearInterval(counter);\n        } else if (response.jobStatus === 'esriJobFailed') {\n          callback.call(context, 'Job Failed', null);\n          window.clearInterval(counter);\n        }\n      }, this);\n      /* eslint-enable */\n    }.bind(this);\n\n    const counter = window.setInterval(pollJob, this._service.options.asyncInterval * 1000);\n  },\n\n  _processGPOutput: function (response) {\n    const processedResponse = {};\n\n    const results = response.results;\n    // grab syncronous results\n    if (this.options.async === false) {\n      // loop through results and pass back, parsing esri json\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].dataType === 'GPFeatureRecordSetLayer') {\n          const featureCollection = Util.responseToFeatureCollection(results[i].value);\n          processedResponse[results[i].paramName] = featureCollection;\n        } else {\n          processedResponse[results[i].paramName] = results[i].value;\n        }\n      }\n    } else { // grab async results slightly differently\n      processedResponse.jobId = this._currentJobId;\n      // var responseValue = response.value;\n    }\n\n    // if output is a raster layer, we also need to stub out a MapService url using jobid\n    if (this.options.async === true && response.dataType === 'GPRasterDataLayer') {\n      const baseURL = this.options.url;\n      const n = baseURL.indexOf('GPServer');\n      const serviceURL = baseURL.slice(0, n) + 'MapServer/';\n      processedResponse.outputMapService = serviceURL + 'jobs/' + this._currentJobId;\n    }\n\n    return processedResponse;\n  },\n\n  _processNetworkAnalystOutput: function (response) {\n    const processedResponse = {};\n\n    if (response.routes.features.length > 0) {\n      const featureCollection = Util.responseToFeatureCollection(response.routes);\n      processedResponse.routes = featureCollection;\n    }\n\n    return processedResponse;\n  },\n\n  _processAsyncOutput: function (response) {\n    const processedResponse = {};\n    processedResponse.jobId = this._currentJobId;\n\n    // if output is a raster layer, we also need to stub out a MapService url using jobid\n    if (this.options.async === true && response.dataType === 'GPRasterDataLayer') {\n      const baseURL = this.options.url;\n      const n = baseURL.indexOf('GPServer');\n      const serviceURL = baseURL.slice(0, n) + 'MapServer/';\n      processedResponse.outputMapService = serviceURL + 'jobs/' + this._currentJobId;\n    }\n\n    // if output is GPFeatureRecordSetLayer, convert to GeoJSON\n    if (response.dataType === 'GPFeatureRecordSetLayer') {\n      const featureCollection = Util.responseToFeatureCollection(response.value);\n      processedResponse[response.paramName] = featureCollection;\n    } else {\n      processedResponse[response.paramName] = response.value;\n    }\n\n    return processedResponse;\n  }\n\n});\n\nexport function task (options) {\n  return new Task(options);\n}\n\nexport default task;\n","import { Service as BaseService } from 'esri-leaflet';\nimport { Task } from '../Tasks/Geoprocessing';\n\nexport const Service = BaseService.extend({\n  options: {\n    asyncInterval: 1\n  },\n\n  createTask: function () {\n    return new Task(this, this.options);\n  }\n\n});\n\nexport function service (options) {\n  return new Service(options);\n}\n\nexport default service;\n"],"names":["BaseTask","L","Util","BaseService"],"mappings":";;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;AAIA;AACY,QAAC,IAAI,GAAGA,gBAAQ,CAAC,MAAM,CAAC;AACpC;EACA,EAAE,QAAQ,EAAEC,qBAAC,CAAC,OAAO,CAAC,SAAS;AAC/B;EACA;EACA,EAAE,MAAM,EAAE,EAAE;EACZ,EAAE,YAAY,EAAE,EAAE;AAClB;EACA,EAAE,UAAU,EAAE,UAAU,OAAO,EAAE;EACjC;EACA,IAAID,gBAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACtD;EACA;EACA,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,WAAW,EAAE;EACzE;EACA,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;EACjC,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;AACpC;EACA;EACA,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,KAAK,EAAE,OAAO,EAAE;EACvD,QAAQ,IAAI,CAAC,KAAK,EAAE;EACpB,UAAU,IAAI,OAAO,CAAC,aAAa,KAAK,8BAA8B,EAAE;EACxE,YAAY,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;EACvC,YAAY,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;EAC1C,WAAW,MAAM;EACjB,YAAY,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;EACtC,YAAY,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC;EAC5C,WAAW;EACX,UAAU,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;EACnC,SAGS;EACT,OAAO,EAAE,IAAI,CAAC,CAAC;EACf,KAAK,MAAM;EACX;EACA,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;EAC9B,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC;EAChF,OAAO;EACP,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;EAC/B,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC;EAC9E,OAAO;EACP,KAAK;EACL,GAAG;AACH;EACA;EACA;EACA,EAAE,QAAQ,EAAE,UAAU,SAAS,EAAE,UAAU,EAAE;EAC7C,IAAI,IAAI,OAAO,UAAU,KAAK,SAAS,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;EAC3E;EACA,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;EAC1C,KAAK,MAAM,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,CAAC,KAAK,EAAE;EACnE;EACA,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;EAC1C,KAAK,MAAM,IAAI,SAAS,KAAK,UAAU,EAAE;EACzC;EACA,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;EAC7D,KAAK,MAAM;EACX;EACA,MAAM,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;EAC7D,MAAM,MAAM,YAAY,GAAG;EAC3B,QAAQ,QAAQ,EAAE,EAAE;EACpB,OAAO,CAAC;AACR;EACA,MAAM,IAAI,YAAY,EAAE;EACxB,QAAQ,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC;EACjD,OAAO;EACP,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,mBAAmB,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;EAChG,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC7D,UAAU,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;EACzD;EACA,YAAY,YAAY,CAAC,QAAQ,CAAC,IAAI,CAACE,gBAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrF,WAAW,MAAM;EACjB;EACA,YAAY,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAEA,gBAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;EAC5G,WAAW;EACX,SAAS;EACT,OAAO,MAAM;EACb,QAAQ,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;EAChF,OAAO;EACP,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;EAC5C,KAAK;EACL,GAAG;AACH;EACA;EACA,EAAE,cAAc,EAAE,UAAU,SAAS,EAAE;EACvC,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;EACxC,GAAG;AACH;EACA;EACA,EAAE,kBAAkB,EAAE,UAAU,SAAS,EAAE,UAAU,EAAE;EACvD,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;EAC9C,GAAG;AACH;EACA;EACA,EAAE,YAAY,EAAE,UAAU,QAAQ,EAAE;EACpC;EACA,IAAI,IAAI,QAAQ,YAAYD,qBAAC,CAAC,YAAY,EAAE;EAC5C,MAAM,OAAOA,qBAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;EAClD,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,SAAS,EAAE;EAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;EACtC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,YAAYA,qBAAC,CAAC,MAAM,EAAE;EACtC,MAAM,QAAQ,GAAG;EACjB,QAAQ,IAAI,EAAE,OAAO;EACrB,QAAQ,WAAW,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC;EACjD,OAAO,CAAC;EACR,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,YAAYA,qBAAC,CAAC,OAAO,EAAE;EACvC;EACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;EAC1D;EACA,MAAM,OAAOC,gBAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;EAC5C,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,SAAS,EAAE;EAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;EACtC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;EACrC;EACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;EACnC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;EACpG,MAAM,OAAOA,gBAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;EAC5C;EACA,KAAK,MAAM;EACX,MAAMA,gBAAI,CAAC,IAAI,CAAC,8HAA8H,CAAC,CAAC;EAChJ,KAAK;EACL,GAAG;AACH;EACA,EAAE,gBAAgB,EAAE,UAAU,QAAQ,EAAE;EACxC,IAAI,IAAI,QAAQ,YAAYD,qBAAC,CAAC,YAAY,EAAE;EAC5C,MAAM,OAAO,sBAAsB,CAAC;EACpC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,SAAS,IAAI,QAAQ,YAAYA,qBAAC,CAAC,MAAM,EAAE;EAC5D,MAAM,OAAO,mBAAmB,CAAC;EACjC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,YAAYA,qBAAC,CAAC,OAAO,EAAE;EACvC,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;EAC1D,MAAM,OAAOC,gBAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;EACrD,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,SAAS,EAAE;EAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;EACtC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;EACrC;EACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;EACnC,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;EACpG,MAAM,OAAOA,gBAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;EACrD,KAAK,MAAM,IAAI,QAAQ,CAAC,IAAI,KAAK,mBAAmB,EAAE;EACtD,MAAM,OAAOA,gBAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EACjE,KAAK,MAAM;EACX,MAAM,OAAO,IAAI,CAAC;EAClB,KAAK;EACL,GAAG;AACH;EACA,EAAE,GAAG,EAAE,UAAU,QAAQ,EAAE,OAAO,EAAE;EACpC,IAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB;EACA,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;EACrC;EACA,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE,QAAQ,EAAE;EACvF,QAAQ,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC5C,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;EAC7D,OAAO,EAAE,IAAI,CAAC,CAAC;EACf;EACA,KAAK,MAAM;EACX,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE,QAAQ,EAAE;EAC9F,QAAQ,IAAI,CAAC,KAAK,EAAE;EACpB,UAAU,IAAI,QAAQ,CAAC,OAAO,EAAE;EAChC,YAAY,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;EACnG,WAAW,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE;EAC1C,YAAY,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;EAC9D,WAAW,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;EACtC,YAAY,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,QAAQ,IAAI,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;EAC/G,WAAW;EACX,SAAS,MAAM;EACf,UAAU,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EACpD,SAAS;EACT,OAAO,EAAE,IAAI,CAAC,CAAC;EACf,KAAK;EACL,GAAG;AACH;EACA,EAAE,SAAS,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE;EACzD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO;EACzB,MAAM,OAAO,GAAG,KAAK,GAAG,WAAW,GAAG,MAAM;EAC5C,MAAM,IAAI,CAAC,YAAY;EACvB,MAAM,SAAS,gBAAgB,EAAE,KAAK,EAAE,QAAQ,EAAE;EAClD,QAAQ,IAAI,MAAM,GAAG,IAAI,CAAC;EAC1B,QAAQ,MAAM,GAAG,IAAI,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;AACrE;EACA,QAAQ,IAAI,MAAM,IAAI,GAAG,EAAE;EAC3B,UAAU,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;EAC/B,SAAS;AACT;EACA,QAAQ,QAAQ,CAAC,IAAI;EACrB,UAAU,OAAO;EACjB,UAAU,KAAK;EACf,UAAU,MAAM;EAChB,UAAU,QAAQ;EAClB,SAAS,CAAC;EACV,OAAO,EAAE,IAAI,CAAC,CAAC;EACf,GAAG;AACH;EACA,EAAE,QAAQ,EAAE,UAAU,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE;EAChD,IAAI,MAAM,OAAO,GAAG,YAAY;EAChC;EACA,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,EAAE,EAAE,EAAE,SAAS,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE;EACtF,QAAQ,IAAI,QAAQ,CAAC,SAAS,KAAK,kBAAkB,EAAE;EACvD,UAAU,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;EAC3B,YAAY,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;EAC9B;EACA;EACA,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,GAAG,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,SAAS,gBAAgB,EAAE,KAAK,EAAE,QAAQ,EAAE;EAC1J,cAAc,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;EACxG,aAAa,EAAE,IAAI,CAAC,CAAC;EACrB,WAAW;EACX,UAAU,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;EACxC,SAAS,MAAM,IAAI,QAAQ,CAAC,SAAS,KAAK,eAAe,EAAE;EAC3D,UAAU,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;EACrD,UAAU,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;EACxC,SAAS;EACT,OAAO,EAAE,IAAI,CAAC,CAAC;EACf;EACA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB;EACA,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;EAC5F,GAAG;AACH;EACA,EAAE,gBAAgB,EAAE,UAAU,QAAQ,EAAE;EACxC,IAAI,MAAM,iBAAiB,GAAG,EAAE,CAAC;AACjC;EACA,IAAI,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;EACrC;EACA,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,KAAK,EAAE;EACtC;EACA,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC/C,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,yBAAyB,EAAE;EAC/D,UAAU,MAAM,iBAAiB,GAAGA,gBAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;EACvF,UAAU,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,iBAAiB,CAAC;EACtE,SAAS,MAAM;EACf,UAAU,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;EACrE,SAAS;EACT,OAAO;EACP,KAAK,MAAM;EACX,MAAM,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;EACnD;EACA,KAAK;AACL;EACA;EACA,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,IAAI,QAAQ,CAAC,QAAQ,KAAK,mBAAmB,EAAE;EAClF,MAAM,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;EACvC,MAAM,MAAM,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC5C,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC;EAC5D,MAAM,iBAAiB,CAAC,gBAAgB,GAAG,UAAU,GAAG,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;EACrF,KAAK;AACL;EACA,IAAI,OAAO,iBAAiB,CAAC;EAC7B,GAAG;AACH;EACA,EAAE,4BAA4B,EAAE,UAAU,QAAQ,EAAE;EACpD,IAAI,MAAM,iBAAiB,GAAG,EAAE,CAAC;AACjC;EACA,IAAI,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;EAC7C,MAAM,MAAM,iBAAiB,GAAGA,gBAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;EAClF,MAAM,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,CAAC;EACnD,KAAK;AACL;EACA,IAAI,OAAO,iBAAiB,CAAC;EAC7B,GAAG;AACH;EACA,EAAE,mBAAmB,EAAE,UAAU,QAAQ,EAAE;EAC3C,IAAI,MAAM,iBAAiB,GAAG,EAAE,CAAC;EACjC,IAAI,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;AACjD;EACA;EACA,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,IAAI,QAAQ,CAAC,QAAQ,KAAK,mBAAmB,EAAE;EAClF,MAAM,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;EACvC,MAAM,MAAM,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC5C,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC;EAC5D,MAAM,iBAAiB,CAAC,gBAAgB,GAAG,UAAU,GAAG,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;EACrF,KAAK;AACL;EACA;EACA,IAAI,IAAI,QAAQ,CAAC,QAAQ,KAAK,yBAAyB,EAAE;EACzD,MAAM,MAAM,iBAAiB,GAAGA,gBAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EACjF,MAAM,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,iBAAiB,CAAC;EAChE,KAAK,MAAM;EACX,MAAM,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC7D,KAAK;AACL;EACA,IAAI,OAAO,iBAAiB,CAAC;EAC7B,GAAG;AACH;EACA,CAAC,EAAE;AACH;EACO,SAAS,IAAI,EAAE,OAAO,EAAE;EAC/B,EAAE,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;EAC3B;;ACtUY,QAAC,OAAO,GAAGC,mBAAW,CAAC,MAAM,CAAC;EAC1C,EAAE,OAAO,EAAE;EACX,IAAI,aAAa,EAAE,CAAC;EACpB,GAAG;AACH;EACA,EAAE,UAAU,EAAE,YAAY;EAC1B,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;EACxC,GAAG;AACH;EACA,CAAC,EAAE;AACH;EACO,SAAS,OAAO,EAAE,OAAO,EAAE;EAClC,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;EAC9B;;;;;;;;;;;;;;"}